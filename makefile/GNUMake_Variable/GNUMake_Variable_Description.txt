
phép gán '=' , ':=' , '?=' '!=' 


* phép gán '='   : là phép gán mà biến tiếp nhận có thể thay đổi khi đối tượng dùng để gán thay đổi giá trị 

* phép gán ':='  : là phép gán một lần duy nhất, nếu đối tượng dùng để gán thay đổi thì biến đấy vẫn ko đổi và giữ nguyên giá 
  trị gán cho nó lần đầu tiên 
* phép gán '?='  : là phép gán mà nó sẽ kiểm tra xem biến đó đã có giá trị sẵn có trước chưa nếu có thì giữ nguyên 
  còn nếu không có thì gán giá trị của đối tượng vào cho biến đó, ở trường hợp này đối tượng thay đổi thì biến cx đổi theo 
  nó sẽ giống với '=' 

* một biến có thể cùng dùng nhiều kiểu gán trong một file make, và sau đó nó sẽ mang tình chất của loại phép gán cuối cùng áp 
  dụng lên nó nhưng đều dựa trên nguyên lý của 3 phép gán trên 
  
ví dụ 

var3 = "aaa"

var = "bbb"

var1 = $(var)

var2 := $(var)

var3 ?= ($var)

var = "ccc" 

kết quả là var1 = "ccc", var2 = "bbb", var3 = "aaa"

* != : thực thi lệnh xong rồi mới gán, ví dụ: TEM != echo "hello" => TEM sẽ được gán là hello chứ không phải echo "hello"
trong khi các phép gán =, := , ::= đều không thực hiện lệnh trước 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ NHỮNG ĐIỀU CẦN QUAN TÂM VỀ BIẾN ~~~~~~~~~~~~~~~~

* nó có thứ tự trên dưới nghĩa là biến trên không thể dùng giá trị của biến khai báo sau nó được 

- điều này có nghĩa là khi biến được được khai báo nó sẽ có luôn giá trị chứ không phải đợi đến khi rule gọi nó thì mới tồn tại 

* chú ý đến dấu gán của biến: tạm chia thành hai dạng 

- thực thi ngay tại thời điểm gán: command sau dấu gán sẽ chạy luôn rồi gán vào biến 

- không thực thi tại thời điểm gán: lúc này biến hoạt động giống với macro 

-> nó là sự kết hợp giữa biến và macro 

















