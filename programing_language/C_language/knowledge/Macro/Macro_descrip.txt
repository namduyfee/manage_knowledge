~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ IMPORTANT VỀ DEFINE ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* difine, macro ... nó sẽ được thực hiện trong quá trình preprocessor ( trong quy trình biên dịch code ) nghĩa là nó có hiệu lực trong quá trình mk chế biến ra file executable. 
Khi mà máy, chip chạy nó chạy file executable kia chứ không có biên dịch code hay gì nữa do đó lúc mà chạy ấy thì chả liên quan gì đến macro nữa. 

ví dụ khi mình gán #define LED HAL_GPIO_READ(..) thì LED sẽ chỉ có ý nghĩa trong quá trình mình tạo ra file executable trên máy tính khi tạo ra file executable thôi 

sau khi tạo ra file executable và mk nạp vào chip lúc này khi chip run nó sẽ chạy file exe đấy chứ không dính gì đến compiler nữa hiểu chưa nghĩa là đừng tuy duy rằng khi chip run thì nó 
mói thay LED vào các vị trí (điều đó là không phải) mà nó đã thay lúc mk biên dịch code trên mấy tính rồi ấy và khi chạy nó chỉ chạy các câu lệnh đã qua xử lý hết rồi mà thôi 
thế nến khi chip run thì LED đã không còn ý nghĩa nữa mà lúc đó tại LED đã được thay bằng HAL_GPIO_READ() hết rồi. 

* compiler và run là quy trình tách biệt compiler tạo ra file exe chứ nó không chạy bất kì câu lệnh nào hết. còn run thì sẽ chạy file exe mà đã được tạo ra sẵn rồi chứ không phải khi run 
nó mới biên dịch code đâu

* COMPILER VÀ RUN LÀ QUÁ TRÌNH TÁCH BIỆT ĐẤY MỘT TK TAO RA FILE EXE VÀ KHÔNG CHẠY CÂU LỆNH MỘT TK CHẠY FILE EXE ĐÃ CÓ SẴN CHỨ KHÔNG PHẢI BIÊN DỊCH GÌ ĐÂU

* THẾ NÊN VÌ SAO KHI DÁN CÁC MACRO THÌ NÓ SẼ KHÔNG THỰC HIỆN LỆNH VÍ DỤ NHƯ TRÊN MK CÓ THỂ NGHĨ LÀ KHI THAY THẾ LED BẰNG HAL_READ(..) THÌ VÔ TÌNH ĐỌC LUÔN LỆNH NHƯNG ĐIỀU ĐÓ KHÔNG XẢY RA 
BỞI VÌ COMPILER CHỨ KHÔNG PHẢI CHẠY CODE NÊN VỀ BẢN CHẤT TRONG QUÁ TRÌNH COMPILER SẼ KHÔNG CÓ CÂU LỆNH NÀO ĐƯỢC CHẠY HẾT. 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~


* khi nào dùng macro: 
- khi muốn biểu diễn một con số thành một thứ có ý nghĩa ta có thể dùng biến để làm điều đó tuy nhiên như vậy lại tốn bộ nhớ và ta dùng 
macro object nó làm cho việc đọc code dễ dàng hơn lại không tốn biến vì nó sẽ dán giá trị vào, nó sẽ là số magic nhưng đó là khi qua preprocessor (thời điểm này con người sẽ ko cần đặt tiêu chí clean code nữa). 
- khi muốn viết một số câu lệnh đơn giản
+ có thể viết trực tiếp nhưng nếu như vậy sẽ rất khó sửa và rối nếu như cần viết 100 đoạn như vậy vào main 
+ dùng hàm, sẽ đỡ rối code nhưng dùng hàm sẽ tốn tài nguyên hơn so với viết trực tiếp chưa kể phải điều hướng đến hàm, xử lý... tốn thời gian 
+ dùng macro function kết hợp giữa viết hàm và viết trực tiếp khi mà nó làm code trở nên dễ đọc, chỉnh sửa hơn và nó sẽ thành viết trực tiếp 
khi qua preprocessor tại lúc này code thực sự sẽ như code trực tiếp nhưng chúng ta chỉ sửa code ở trc preprocessor nên sẽ không lo về vấn 
đề clean code mà vẫn đạt hiệu suất tốt hơn so với viết hàm. 

* về nguyên tắc bất kì cái gì từ viết dưới macro mà trùng với macro đó nó sẽ thay thế hết, đối với preprocessor tất cả ở dưới dạng nhãn. 

- trừ khi nó là string "X" thì macro X ko thay thế vào được, trừ khi nó được viết liền XABC thì macro X cx không chèn vào được đâu. 

- kể cả nó là một kiểu dữ liệu 
+ #define int INT 
+ int x; -> INT x; 

- kể cả là tên một function 
+ #define sum() STM
+ void sum() {} -> void STM {} 
NOTE: để hàm không bị thay thế bởi macro thì định nghĩa hàm trên macro đấy (chỉ khai báo trên thôi thì vẫn bị thay thế). 

- kể cả là một thuộc tính của structer
+ #define REGIS ODR 

+ typedef struct {int REGIS; ...} 	-> typedef struct {int ODR;...}
+ GPIO.REGIS 				-> GPIO.ODR

- nếu là string: #define int INT char tem[] = { " "int" " }   -> { " "INT" " } 


* IMPORTAN: nó sẽ không thay thế trực tiếp giữa #define: 

- không có thay thế một define vào một define 

+ example: 

#define str #X 
#define strstr(X) str
#define ADC DAC 

char tem[] = strstr(ADC); 

- nếu có thay thế strstr(X) str -> strstr(X) #X -> strstr(ADC) -> "DAC" 
- nhưng khi test nó sẽ không thay thế tức strstr(X) str vẫn sẽ là như vậy chứ không thay #X cho str trực tiếp 
-> strstr(ADC) -> str -> #X -> char tem[] = #X; 
 
- vậy tại vị trí gọi macro thì nó mới dán theo trình tự của từng macro 

NOTE: chính vì thế khi:

#define BUFSIZE 1020
#define TABLESIZE BUFSIZE
#undef BUFSIZE
#define BUFSIZE 37

int tem1 = TABLESIZE; 	-> tem1 = 37; 
int tem2 = BUFSIZE;	-> tem2 = 37; 



